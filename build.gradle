plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.1"
    id "com.diffplug.spotless" version "7.0.2"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "org.frc5687.robot.Main"
def TEAM_IP = "10.56.87.2"

spotless {
  java {
    importOrder()
    removeUnusedImports()
    cleanthat()          
    googleJavaFormat()
    leadingSpacesToTabs(2)
    leadingTabsToSpaces(4)
    formatAnnotations()  
  }
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)
            mirrorAllPaths()
            mirrorAllAutos()
            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    project.logger.lifecycle('Checking if profile mode...')

                    //Enter profile mode with ./gradlew deploy -PprofileMode
                    if (project.hasProperty("profileMode")) {
                        project.logger.lifecycle('Profile mode enabled!')
                        project.logger.lifecycle("Connect JMX client to ${TEAM_IP}:1099 for RoboRIO profiling with VisualVM.")
                        jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.port=1099")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                        jvmArgs.add("-Djava.rmi.server.hostname=${TEAM_IP}")
                    } else {
                        project.logger.lifecycle('Normal mode, profiling disabled.')
                    }

                    jvmArgs.add("-XX:+UnlockExperimentalVMOptions")
                    jvmArgs.add("-XX:GCTimeRatio=5")
                    jvmArgs.add("-XX:+UseSerialGC")
                    jvmArgs.add("-XX:MaxGCPauseMillis=50")

                    final MAX_JAVA_HEAP_SIZE_MB = 100
                    jvmArgs.add("-Xmx" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-Xms" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-XX:+AlwaysPreTouch")
                }
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

void mirrorAllPaths() {
    def pathDirectory = file("src/main/deploy/pathplanner/paths")
    def jsonSlurper = new groovy.json.JsonSlurper()

    println "Mirroring paths..."
    int flipCount = 0
    Map namedWaypointCoords = new HashMap<String, Map>()
    if (!pathDirectory.exists() || !pathDirectory.isDirectory()) {
        throw new GradleException("Invalid directory: $pathDirectory")
    }
    pathDirectory.eachFile { file ->
        if (file.name.endsWith('.path')) {
            try {
                def jsonNode = jsonSlurper.parse(file)
                jsonNode.waypoints.each {item -> 
                    if (item.linkedName != null) {
                        namedWaypointCoords.put(item.linkedName, item)
                    }
                }
            } catch (Exception e) {
                println "Error flipping path file $file: $e"
            }
        }
    }
    int waypointCount = namedWaypointCoords.keySet().size()
    println "Found $waypointCount named waypoints."
    pathDirectory.eachFile { file ->
        if (file.name.contains("(Flipped)")) {
            file.delete()
        } else if (file.name.endsWith('.path')) {
            flipCount += 1
            try {
                def jsonNode = jsonSlurper.parse(file)
                flipPath(jsonNode, namedWaypointCoords)
                def newFile = new File("src/main/deploy/pathplanner/paths/(Flipped) $file.name")
                newFile.createNewFile()
                newFile.setText(new groovy.json.JsonBuilder(jsonNode).toString())
            } catch (Exception e) {
                println "Error flipping path file $file: $e"
            }
        }
    }
    println "Mirrored $flipCount paths."
}

void flipPath(Map node, Map namedWaypointCoords) {
    final double FIELD_WIDTH = 8.052
    node.each { key, value ->
        if (key == "rotation" && value instanceof Number) {
            node[key] = -value
        }
        else if (key == "waypoints" && value instanceof List) {
            value.each { item ->
                if (item.linkedName != null && item.linkedName.contains("Reef")) {
                    // we need to use the other named waypoint so the coral arm lines up
                    int reefSide = Integer.valueOf(item.linkedName.tokenize().get(1))
                    int newReefSide = (7-reefSide) % 6 + 1
                    String newLeftRight = item.linkedName.contains("Left") ? "Right" : "Left"
                    String waypointName = "Reef $newReefSide $newLeftRight"
                    Map waypoint = namedWaypointCoords.get(waypointName)
                    if (item.prevControl != null) {
                        double diffX = item.prevControl.x - item.anchor.x
                        double diffY = item.prevControl.y - item.anchor.y
                        item.prevControl.x = waypoint.anchor.x + diffX
                        item.prevControl.y = waypoint.anchor.y - diffY // mirrored
                    }
                    if (item.nextControl != null) {
                        double diffX = item.nextControl.x - item.anchor.x
                        double diffY = item.nextControl.y - item.anchor.y
                        item.nextControl.x = waypoint.anchor.x + diffX
                        item.nextControl.y = waypoint.anchor.y - diffY // mirrored
                    }
                    item.anchor.x = waypoint.anchor.x
                    item.anchor.y = waypoint.anchor.y
                    item.linkedName = waypointName
                } else {
                    // no worries, just vanilla mirror it
                    item.anchor.y = FIELD_WIDTH - item.anchor.y
                    if (item.prevControl != null) item.prevControl.y = FIELD_WIDTH - item.prevControl.y
                    if (item.nextControl != null) item.nextControl.y = FIELD_WIDTH - item.nextControl.y
                    item.linkedName = null
                }
            }
        }
        else if (value instanceof Map) {
            flipPath(value, namedWaypointCoords)
        }
        else if (value instanceof List) {
            value.each { item ->
                if (item instanceof Map) {
                    flipPath(item, namedWaypointCoords)
                }
            }
        }
    }
}

def mirrorAllAutos() {
    def pathDirectory = file("src/main/deploy/pathplanner/autos")
    def jsonSlurper = new groovy.json.JsonSlurper()

    println "Mirroring autos..."
    int flipCount = 0

    if (!pathDirectory.exists() || !pathDirectory.isDirectory()) {
        throw new GradleException("Invalid directory: $pathDirectory")
    }
    pathDirectory.eachFile { file ->
        if (file.name.contains("(Flipped)")) {
            file.delete()
        } else if (file.name.endsWith('.auto')) {
            flipCount += 1
            try {
                def jsonNode = jsonSlurper.parse(file)
                flipAuto(jsonNode)
                def newFile = new File("src/main/deploy/pathplanner/autos/(Flipped) $file.name")
                newFile.createNewFile()
                newFile.setText(new groovy.json.JsonBuilder(jsonNode).toString())
            } catch (Exception e) {
                println "Error flipping path file $file: $e"
            }
        }
    }
    println "Mirrored $flipCount autos."
}

void flipAuto(Map node) {
    node.each { key, value ->
        if (key == "pathName") {
            node[key] = "(Flipped) $value"
        }
        else if (value instanceof Map) {
            flipAuto(value)
        }
        else if (value instanceof List) {
            value.each { item ->
                if (item instanceof Map) {
                    flipAuto(item)
                }
            }
        }
    }
}

dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
    dependsOn spotlessApply
    options.compilerArgs.add '-XDstringConcat=inline'
}